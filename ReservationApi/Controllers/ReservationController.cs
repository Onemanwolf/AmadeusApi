using Microsoft.AspNetCore.Mvc;
using ReservationApi.Data.Models;
using ReservationApi.Services;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace ReservationApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ReservationController : ControllerBase
    {
        private readonly IReservationService _reservationService;

        public ReservationController(IReservationService reservationSvc)
        {
            _reservationService = reservationSvc;
        }

        [HttpGet]
        public async Task<ActionResult<List<Reservation>>> GetAsync()
        {
            var reservations = await _reservationService.GetAsync();

            return reservations;
        }

        [HttpGet("{id}", Name = "GetReservation")]
        public async Task<ActionResult<Reservation>> GetAsync(string id)
        {
            var reservation = await _reservationService.GetAsync(id);

            if (reservation == null)
            {
                return NotFound();
            }

            return Ok(reservation);
        }

        [HttpPost]
        public async Task<ActionResult<Reservation>> CreateAsync(Reservation reservation)
        {
            if (reservation == null)
                return BadRequest("No Reservation supplied");

            //if id is passed in with request, empty it so it can be generated by data layer
            if (!string.IsNullOrEmpty(reservation.Id))
                reservation.Id = string.Empty;

            var newReservation = await _reservationService.CreateAsync(reservation);

            return CreatedAtRoute("GetReservation", new { id = reservation.Id }, newReservation);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateAsync(string id, Reservation reservationIn)
        {
            var reservation = await _reservationService.GetAsync(id);

            if (reservation == null)
            {
                //status code 404
                return NotFound();
            }

            await _reservationService.UpdateAsync(id, reservationIn);

            return NoContent();
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteAsync(string id)
        {
            var reservation = await _reservationService.GetAsync(id);

            if (reservation == null)
            {
                return NotFound();
            }

            await _reservationService.RemoveAsync(reservation.Id);

            return NoContent();
        }
    }
}